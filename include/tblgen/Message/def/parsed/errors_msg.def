{ err_generic_error, "\"$0\""},
{ err_max_macro_recursion_depth, "\"maximum macro recursion depth reached ($0) in expansion of macro $1\""},
{ err_type_mismatch, "\"incompatible types $0 and $1\""},
{ err_unexpected_value, "\"expected $0\""},
{ err_no_explicit_cast, "\"no known explicit conversion from $0 to $1\""},
{ err_return_type_mismatch, "\"returned value of type $0 is not compatible with declared return type $1\""},
{ err_cond_not_boolean, "\"${ 0 | select(if,while,for,tertiary operator ?:) } condition must be boolean\""},
{ err_range_not_iterable, "\"range expression of for-in statement must conform to 'Iterable'\""},
{ err_dict_key_not_hashable, "\"dictionary keys must conform to 'Hashable'\""},
{ err_requires_contextual_type, "\"$0 requires a contextual type\""},
{ err_not_string_representable, "\"value must conform to 'StringRepresentable'\""},
{ err_illegal_subscript, "\"subscript operator cannot be applied to value of type $0\""},
{ err_subscript_index_not_integral, "\"subscript indices have to be integral\""},
{ err_cannot_assign_void, "\"cannot assign value of type void\""},
{ err_reserved_identifier, "\"$0 is a reserved identifier\""},
{ err_value_not_a_pointer, "\"value is not a pointer\""},
{ err_type_not_callable, "\"given type $0 is not callable\""},
{ err_reassign_constant, "\"cannot reassign constant ${ 0 | select(field,variable) } $0\""},
{ err_assign_non_mutating_self, "\"cannot reassign 'self' in a non-mutating method\""},
{ err_assign_to_rvalue, "\"cannot assign to rvalue of type $0\""},
{ err_func_not_found, "\"${ 0 | select(function, method) } $1 not found\""},
{ err_no_matching_call, "\"no matching call for ${ 0 | select(function,method) } $1 found\""},
{ err_generic_type_not_inferred, "\"could not infer generic type $0 of ${ 1 | select(class,struct,enum,union,protocol) } $2\""},
{ err_expected_type_as_arg, "\"expected ${ 0 | ordinal } argument of function $1 to be a type\""},
{ err_method_must_be_static, "\"method $0 must be static\""},
{ err_method_must_not_be_static, "\"method $0 must not be static\""},
{ err_ambiguous_call, "\"call to ${ 0 | select(function, method) } $1 is ambiguous\""},
{ err_namespace_not_found, "\"namespace $0 does not exist\""},
{ err_namespace_does_not_have_member, "\"namespace $0 does not define member $1\""},
{ err_import_multiple_with_wildcar, "\"cannot import multiple items when a wildcard ('*') import is present\""},
{ err_class_not_accessible, "\"${ 0 | select(class,struct,enum,union,protocol) } $1 is not accessible\""},
{ err_class_not_found, "\"class $0 not found\""},
{ err_instantiate_abstract_class, "\"cannot instantiate abstract class $0\""},
{ err_member_not_found, "\"${ 0 | select(class,struct,enum,union,protocol) } $1 does not have a member named $2\""},
{ err_member_needs_initializing, "\"member $0 must be initialized in every constructor\""},
{ err_generic_type_not_found, "\"${ 0 | select(class,struct,enum,union,protocol) } does not have a generic type $1\""},
{ err_generic_type_count, "\"expected $0 generic type ${ 0 | plural_s(argument) }, $1 given\""},
{ err_generic_type_incompatible, "\"generic type parameter $0 is not compatible with given type $1\""},
{ err_struct_member_of_self, "\"structs cannot have members of their own type (use a pointer instead)\""},
{ err_constant_field_setter, "\"constant fields cannot have a setter\""},
{ err_self_outside_method, "\"${ 0 | select(self, super, Self) } can only be used in instance methods\""},
{ err_super_without_base, "\"cannot reference 'super' because class $0 does not have a base class\""},
{ err_no_template_method, "\"${ 0 | select(class,struct,enum,union,protocol) } $1 does not have a templated method '$2'\""},
{ err_overload_generic_params, "\"${ 0 | select(function, method) } overloads must have the same template arguments\""},
{ err_duplicate_method, "\"duplicate declaration of ${ 0 | select(function, method) } $1\""},
{ err_union_initializer_arg_count, "\"union initializer takes one argument\""},
{ err_union_initializer_type, "\"union initializer argument must be convertible to one of the unions types\""},
{ err_protocol_not_found, "\"protocol $0 does not exist\""},
{ err_conforming_to_non_protocol, "\"$0 is not a protocol\""},
{ err_protocol_property_get_set, "\"property in protocol must require a getter or setter\""},
{ err_incorrect_protocol_impl, "\"${ 0 | select(class, struct, enum,union,protocol) } $1 does not correctly implement protocol $2\""},
{ err_circular_conformance, "\"circular protocol conformance between $0 and $1\""},
{ err_enum_case_not_found, "\"enum $0 does not define case $1 ${ 2 | if(with the given arguments) }\""},
{ err_enum_case_wrong_no_args, "\"case $0 requires $1 arguments, $2 given\""},
{ err_indexed_prop_on_nun_tuple, "\"cannot access indexed property on non-tuple type $0\""},
{ err_index_higher_than_arity, "\"cannot access index $0 on tuple with arity $1\""},
{ err_attr_not_applicable, "\"attribute $0 is not valid here\""},
{ err_not_initialized, "\"value with no default constructor must be explicitly initialized\""},
{ err_var_redeclaration, "\"redeclaration of variable $0\""},
{ err_undeclared_identifer, "\"reference to undeclared identifier $0\""},
{ err_private_access, "\"private ${ 0 | select(variable, function) } $1 is not accessible\""},
{ err_private_member_access, "\"private member $0 of ${ 1 | select(class, struct, enum,union,protocol) } $2 is not accessible\""},
{ err_protected_member_access, "\"protected member $0 of ${ 1 | select(class, struct, enum, union,protocol) } $2 is not accessible\""},
{ err_return_outside_func, "\"keyword 'return' is only allowed in function bodies\""},
{ err_loop_keyword_outside_loop, "\"keyword '${ 0 | select(continue, break) }' is only valid in loop bodies\""},
{ err_no_type_after_as, "\"expected type after 'as'\""},
{ err_duplicate_label, "\"duplicate label $0\""},
{ err_label_not_found, "\"no label $0 to go to\""},
{ err_goto_skips_decl, "\"goto statement cannot jump over variable declaration\""},
{ err_incompatible_binop_types, "\"${ 0 | select(left, right) } hand side of binary operator '$1' must be ${ 2 | select(integral, floating point, boolean) }\""},
{ err_binop_not_applicable, "\"cannot apply binary operator '$0' to values of type $1 and $2\""},
{ err_different_operand_types, "\"both operands to binary operator '$0' must be of the same type, $1 and $2 given\""},
{ err_unary_op_not_applicable, "\"cannot apply unary operator '$0' to ${ 1 | select(value, rvalue) } of type $2\""},
{ err_const_unary_op, "\"mutating unary operator '$0' cannot be applied to a constant value\""},
{ err_dereference_non_pointer, "\"cannot dereference non-pointer type $0\""},
{ err_reference_non_lvalue, "\"cannot take address of rvalue of type $0\""},
{ err_match_value_not_equatable, "\"matched value must be enum or conform to equatable\""},
{ err_invalid_match, "\"cannot match values of types $0 and $1\""},
{ err_duplicate_case, "\"duplicate case $0 in match statement\""},
{ err_continue_from_last_case, "\"cannot continue from last case statement\""},
{ err_continue_to_let_case, "\"cannot continue to case with 'let' expression\""},
{ err_match_not_exhaustive, "\"match statements must be exhaustive\""},
{ err_expected_all_let_expr, "\"expected all arguments to be 'let' expressions\""},
{ err_unexpected_let_expr, "\"unexpected 'let' / 'var' expression\""},
{ err_main_invalid_signature, "\"invalid signature for 'main'\""},
{ err_returning_incomp_type, "\"returning value of type $0 from function with declared return type $1\""},
{ err_not_all_code_paths_return, "\"not all code paths return a value\""},
{ err_func_redeclaration, "\"redeclaration of ${ 0 | select(function,method) } $1 with the same signature as a previous declaration\""},
{ err_incomp_arg_counts, "\"incompatible argument count: expected $0 but got $1\""},
{ err_lambda_arg_default_val, "\"lambda expression arguments cannot have default values\""},
{ err_lambda_could_not_infer_type, "\"could not infer type of ${ 0 | ordinal } argument of lambda expression\""},
{ err_typedef_generic_not_provided, "\"generic type $0 not provided for typedef\""},
{ err_not_throwable, "\"${ 0 | select(thrown,caught) } value must conform to 'Throwable'\""},
{ err_duplicate_catch, "\"duplicate type in catch statement\""},