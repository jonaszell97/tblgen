
/* ANY */
generic_error <err> "$0"
generic_warn <warn> "$0"
generic_note <note> "$0"

/* PARSING */

/* PREPROCESSING*/
max_macro_recursion_depth <err> "maximum macro recursion depth reached ($0) in expansion of macro $1"

/* TYPE ERRORS */
implicit_cast <warn> "implicit cast from $0 to $1"
type_mismatch <err> "incompatible types $0 and $1"
unexpected_value <err> "expected $0"
no_explicit_cast <err> "no known explicit conversion from $0 to $1"
return_type_mismatch <err> "returned value of type $0 is not compatible with declared return type $1"
cond_not_boolean <err> "${ 0 | select(if,while,for,tertiary operator ?:) } condition must be boolean"
range_not_iterable <err> "range expression of for-in statement must conform to 'Iterable'"
dict_key_not_hashable <err> "dictionary keys must conform to 'Hashable'"
requires_contextual_type <err> "$0 requires a contextual type"
not_string_representable <err> "value must conform to 'StringRepresentable'"
illegal_subscript <err> "subscript operator cannot be applied to value of type $0"
subscript_index_not_integral <err> "subscript indices have to be integral"
cannot_assign_void <err> "cannot assign value of type void"
reserved_identifier <err> "$0 is a reserved identifier"
value_not_a_pointer <err> "value is not a pointer"
type_not_callable <err> "given type $0 is not callable"
reassign_constant <err> "cannot reassign constant ${ 0 | select(field,variable) } $0"
assign_non_mutating_self <err> "cannot reassign 'self' in a non-mutating method"
assign_to_rvalue <err> "cannot assign to rvalue of type $0"

/* FUNCTION / METHOD CALL ERRORS */
func_not_found <err> "${ 0 | select(function, method) } $1 not found"
no_matching_call <err> "no matching call for ${ 0 | select(function,method) } $1 found"
cand_no_implicit_conv <note> "candidate function not viable: no implicit conversion from $0 to $1 for ${ 2 | ordinal } argument"
cand_failed_constraint <note> "candidate function not viable because of failed constraint"
cand_generic_type_not_inferred <note> "could not infer generic type $0"
cand_mismatched_arg_count <note> "candidate function not viable: requires $0 ${ 0 | plural_s(argument) }, $1 given"
not_enough_generic_parameters <note> "expected $0 generic type parameters, got $1"
generic_type_not_inferred <err> "could not infer generic type $0 of ${ 1 | select(class,struct,enum,union,protocol) } $2"
expected_type_as_arg <err> "expected ${ 0 | ordinal } argument of function $1 to be a type"
method_must_be_static <err> "method $0 must be static"
method_must_not_be_static <err> "method $0 must not be static"

ambiguous_call <err> "call to ${ 0 | select(function, method) } $1 is ambiguous"
ambiguous_call <note> "candidate declared here"

/* NAMESPACE ERRORS */
namespace_not_found <err> "namespace $0 does not exist"
namespace_does_not_have_member <err> "namespace $0 does not define member $1"
import_multiple_with_wildcar <err> "cannot import multiple items when a wildcard ('*') import is present"

/* CLASS / STRUCT ERRORS */
class_not_accessible <err> "${ 0 | select(class,struct,enum,union,protocol) } $1 is not accessible"
class_not_found <err> "class $0 not found"
instantiate_abstract_class <err> "cannot instantiate abstract class $0"
member_not_found <err> "${ 0 | select(class,struct,enum,union,protocol) } $1 does not have a member named $2"
member_needs_initializing <err> "member $0 must be initialized in every constructor"
generic_type_not_found <err> "${ 0 | select(class,struct,enum,union,protocol) } does not have a generic type $1"
generic_type_count <err> "expected $0 generic type ${ 0 | plural_s(argument) }, $1 given"
generic_type_incompatible <err> "generic type parameter $0 is not compatible with given type $1"
struct_member_of_self <err> "structs cannot have members of their own type (use a pointer instead)"
constant_field_setter <err> "constant fields cannot have a setter"
self_outside_method <err> "${ 0 | select(self, super, Self) } can only be used in instance methods"
super_without_base <err> "cannot reference 'super' because class $0 does not have a base class"

no_template_method <err> "${ 0 | select(class,struct,enum,union,protocol) } $1 does not have a templated method '$2'"

overload_generic_params <err> "${ 0 | select(function, method) } overloads must have the same template arguments"
overload_generic_params <note> "previous template argument list declared here"

duplicate_method <err> "duplicate declaration of ${ 0 | select(function, method) } $1"
duplicate_method <note> "previous declaration here"

union_initializer_arg_count <err> "union initializer takes one argument"
union_initializer_type <err> "union initializer argument must be convertible to one of the unions types"

/* PROTOCOL ERRORS */
protocol_not_found <err> "protocol $0 does not exist"
conforming_to_non_protocol <err> "$0 is not a protocol"
protocol_property_get_set <err> "property in protocol must require a getter or setter"

incorrect_protocol_impl <err> "${ 0 | select(class, struct, enum,union,protocol) } $1 does not correctly implement protocol $2"
incorrect_protocol_impl_prop <note> "required property $0 ${ 1 | select(is missing, requires a getter, requires a setter, requires a getter and a setter) }"
incorrect_protocol_impl_method <note> "required method $0 ${ 1 | select(is missing, has incompatible signature, has incompatible return type) }"
circular_conformance <err> "circular protocol conformance between $0 and $1"

/* ENUM ERRORS */
enum_case_not_found <err> "enum $0 does not define case $1 ${ 2 | if(with the given arguments) }"
enum_case_wrong_no_args <err> "case $0 requires $1 arguments, $2 given"

/* TUPLE ERRORS */
indexed_prop_on_nun_tuple <err> "cannot access indexed property on non-tuple type $0"
index_higher_than_arity <err> "cannot access index $0 on tuple with arity $1"

/* ATTRIBUTE ERRORS */
attr_not_applicable <err> "attribute $0 is not valid here"

/* INITIALIZATION ERRORS */
not_initialized <err> "value with no default constructor must be explicitly initialized"
var_redeclaration <err> "redeclaration of variable $0"
var_redeclaration <note> "previous declaration is here"
undeclared_identifer <err> "reference to undeclared identifier $0"

/* ACCESS ERRORS */
private_access <err> "private ${ 0 | select(variable, function) } $1 is not accessible"
private_member_access <err> "private member $0 of ${ 1 | select(class, struct, enum,union,protocol) } $2 is not accessible"
protected_member_access <err> "protected member $0 of ${ 1 | select(class, struct, enum, union,protocol) } $2 is not accessible"

/* KEYWORD ERRORS */
return_outside_func <err> "keyword 'return' is only allowed in function bodies"
loop_keyword_outside_loop <err> "keyword '${ 0 | select(continue, break) }' is only valid in loop bodies"
no_type_after_as <err> "expected type after 'as'"
duplicate_label <err> "duplicate label $0"
duplicate_label <note> "previous label here"
label_not_found <err> "no label $0 to go to"
goto_skips_decl <err> "goto statement cannot jump over variable declaration"
goto_skipped_decl <note> "skipped declaration of variable $0 here"

/* OPERATORS */
incompatible_binop_types <err> "${ 0 | select(left, right) } hand side of binary operator '$1' must be ${ 2 | select(integral, floating point, boolean) }"
binop_not_applicable <err> "cannot apply binary operator '$0' to values of type $1 and $2"
different_operand_types <err> "both operands to binary operator '$0' must be of the same type, $1 and $2 given"

unary_op_not_applicable <err> "cannot apply unary operator '$0' to ${ 1 | select(value, rvalue) } of type $2"
const_unary_op <err> "mutating unary operator '$0' cannot be applied to a constant value"
dereference_non_pointer <err> "cannot dereference non-pointer type $0"
reference_non_lvalue <err> "cannot take address of rvalue of type $0"

/* MATCH STMT */
match_value_not_equatable <err> "matched value must be enum or conform to equatable"
invalid_match <err> "cannot match values of types $0 and $1"
duplicate_case <err> "duplicate case $0 in match statement"
duplicate_case <note> "previous case is here"
continue_from_last_case <err> "cannot continue from last case statement"
continue_to_let_case <err> "cannot continue to case with 'let' expression"
match_not_exhaustive <err> "match statements must be exhaustive"
expected_all_let_expr <err> "expected all arguments to be 'let' expressions"

unexpected_let_expr <err> "unexpected 'let' / 'var' expression"

/* FUNCTION RETURNS */
main_return_type <warn> "return type of 'main' will always be set to Int"
main_invalid_signature <err> "invalid signature for 'main'"
returning_incomp_type <err> "returning value of type $0 from function with declared return type $1"
not_all_code_paths_return <err> "not all code paths return a value"
func_redeclaration <err> "redeclaration of ${ 0 | select(function,method) } $1 with the same signature as a previous declaration"
func_redeclaration_memberwise_init <note> "previous declaration is the memberwise initializer"
func_redeclaration <note> "previous declaration is here"

/* LAMBDA EXPRESSIONS */
incomp_arg_counts <err> "incompatible argument count: expected $0 but got $1"
lambda_arg_default_val <err> "lambda expression arguments cannot have default values"
lambda_could_not_infer_type <err> "could not infer type of ${ 0 | ordinal } argument of lambda expression"

/* TYPEDEF */
typedef_generic_not_provided <err> "generic type $0 not provided for typedef"

/* EXCEPTIONS */
not_throwable <err> "${ 0 | select(thrown,caught) } value must conform to 'Throwable'"
duplicate_catch <err> "duplicate type in catch statement"
