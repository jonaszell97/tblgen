#ifdef TBLGEN_MSG
#   define TBLGEN_ERROR(name, msg, fatal) TBLGEN_MSG(name, msg)
#   define TBLGEN_WARN(name, msg) TBLGEN_MSG(name, msg)
#   define TBLGEN_NOTE(name, msg) TBLGEN_MSG(name, msg)
#endif

#ifdef TBLGEN_ERROR
   TBLGEN_ERROR(_first_err, "", false)
   TBLGEN_ERROR(err_generic_error, "$0", false)
   TBLGEN_ERROR(fatal_any_fatal, "$0", true)
   TBLGEN_ERROR(err_invalid_opt_level, "optimization levels higher than $0 are unsupported", false)
   TBLGEN_ERROR(err_unsupported_opt_level, "unsupported optimization level '$0'", false)
   TBLGEN_ERROR(err_expected_filename_after, "expected filename after '$0'", false)
   TBLGEN_ERROR(err_unsupported_argument, "unsupported argument '$0'", false)
   TBLGEN_ERROR(err_no_source_file, "no source file specified", false)
   TBLGEN_ERROR(fatal_too_many_errors, "too many errors emmitted, stopping now", true)
   TBLGEN_ERROR(err_internal_compiler_error, "an internal compiler error occured", false)
   TBLGEN_ERROR(err_module_must_be_first, "'module' declaration must appear first in a source file", false)
   TBLGEN_ERROR(err_unexpected_eof, "unexpected end of file${ 0 | if(, expecting $1) }", false)
   TBLGEN_ERROR(err_unexpected_token, "unexpected token $0${ 1 | if(, expecting $2) }", false)
   TBLGEN_ERROR(err_expecting_decl, "unexpected token $0, expecting ${ 1 | if(top level ) }declaration", false)
   TBLGEN_ERROR(err_extraneous_paren, "extraneous closing ${ 0 | select(')', '}', ']', '>') }", false)
   TBLGEN_ERROR(err_invalid_traits, "invalid '__traits' directive '$0'", false)
   TBLGEN_ERROR(err_duplicate_access_spec, "duplicate access specifier", false)
   TBLGEN_ERROR(err_vararg_must_be_last, "vararg arguments must come last in a function signature", false)
   TBLGEN_ERROR(err_vararg_default_value, "varargs may not define a default value", false)
   TBLGEN_ERROR(err_expected_default_value, "expecting default value", false)
   TBLGEN_ERROR(err_vararg_not_valid, "${ 0 | select(subscript) } cannot be vararg", false)
   TBLGEN_ERROR(err_covar_convar_already_specified, "${ 0 | select(covariance, contravariance) } already specified", false)
   TBLGEN_ERROR(err_inferred_arr_size_not_allowed, "array type with inferred size is only allowed with variable declarations", false)
   TBLGEN_ERROR(err_mutating_non_method, "expected method declaration after 'mutating'", false)
   TBLGEN_ERROR(err_cannot_be_static, "${ 0 | select(associated type, static if, static for, static assert, static print, typedef, alias, initializer, deinitializer, enum case, inner record) } declaration cannot be static", false)
   TBLGEN_ERROR(err_cannot_have_access_spec, "${ 0 | select(associated type, static if, static for, static assert, static print, typedef, alias, initializer, deinitializer, enum case, inner record) } declaration cannot have an access specifier", false)
   TBLGEN_ERROR(err_duplicate_decl_kind, "unexpected declaration keyword", false)
   TBLGEN_ERROR(err_virt_method_outside_class, "method marked ${ 0 | select(virtual,override) } may only appear in class declarations", false)
   TBLGEN_ERROR(err_overriding_decl_requires_override, "overriding declaration requires 'override' keyword", false)
   TBLGEN_ERROR(err_override_no_matching_method, "method marked 'override' does not correspond to any ${ 0 | if(overridable ) }declaration in a base class", false)
   TBLGEN_ERROR(err_overriden_method_not_virtual, "cannot override non-virtual method '$0'", false)
   TBLGEN_ERROR(err_multiple_inheritance, "only one inheritance clause is allowed", false)
   TBLGEN_ERROR(err_deinit_args, "deinitializers cannot have arguments", false)
   TBLGEN_ERROR(err_prop_must_have_type, "${ 0 | select(property, subscript) } must have a defined type", false)
   TBLGEN_ERROR(err_prop_must_have_get_or_set, "${ 0 | select(property, subscript) } must have a getter or a setter", false)
   TBLGEN_ERROR(err_extension_template_params, "extensions cannot have a template parameter list", false)
   TBLGEN_ERROR(err_duplicate_getter_setter, "${ 0 | select(getter, setter) } already declared", false)
   TBLGEN_ERROR(err_last_match_case_empty, "last case in a match statement may not be empty", false)
   TBLGEN_ERROR(err_expected_declaration, "expected declaration after '$0'", false)
   TBLGEN_ERROR(err_declared_with_definition, "'declare'd statements may not have a definition", false)
   TBLGEN_ERROR(err_bad_extern_kind, "unknown extern kind '$0'", false)
   TBLGEN_ERROR(err_import_not_at_begin, "'import' statements may only appear at the beginning of a file", false)
   TBLGEN_ERROR(err_labeled_args_last, "labeled arguments must come last in a function call", false)
   TBLGEN_ERROR(err_anon_closure_arg, "anonymous closure argument used outside of a closure", false)
   TBLGEN_ERROR(err_anon_closure_idx_too_high, "closures may not have more than $0 arguments, $1 given", false)
   TBLGEN_ERROR(err_prec_prop_already_defined, "${ 0 | select('higherThan' relationship, 'lowerThan' relationship, associativity, 'assignment') } already defined", false)
   TBLGEN_ERROR(err_bad_associativity, "associativity must be either 'left' or 'right'", false)
   TBLGEN_ERROR(err_ownership_annot_not_allowed, "ownership annotations can only be used on function argument types", false)
   TBLGEN_ERROR(err_must_be_top_level, "${ 0 | select(precedence group, operator) } declaration cannot be in a nested scope", false)
   TBLGEN_ERROR(err_precedence_cycle, "cycle in precedence relation between '$0' and '$1'", false)
   TBLGEN_ERROR(err_precedence_group_does_not_exist, "precedence group '$0' does not exist", false)
   TBLGEN_ERROR(err_undefined_precedence, "expression must be parenthesized because no precedence relation exists between '$0' and '$1'", false)
   TBLGEN_ERROR(err_undeclared_operator, "undeclared operator '$0'", false)
   TBLGEN_ERROR(err_abstract_definition, "abstract method '$0' cannot have a body", false)
   TBLGEN_ERROR(err_abstract_must_be_overriden, "class '$0' must override abstract method '$1' of base class '$2'", false)
   TBLGEN_ERROR(err_macro_delim_must_be, "macro delimiter must be either '()', '{}' or '[]'", false)
   TBLGEN_ERROR(err_variable_kind_must_be, "macro variable kind must be one of 'expr', 'stmt', 'type' or 'decl'", false)
   TBLGEN_ERROR(err_expected_after_repetition, "expected '*', '?' or '+' after repeated macro pattern", false)
   TBLGEN_ERROR(err_macro_does_not_exist, "macro '$0' does not exist in current scope", false)
   TBLGEN_ERROR(err_macro_expects_delim, "macro '$0' expects '$1' as its delimiter", false)
   TBLGEN_ERROR(err_macro_undeclared_variable, "variable '$0' was not declared in macro pattern", false)
   TBLGEN_ERROR(err_macro_variable_unexpanded, "macro variable '$0' can only be referenced in an expansion expression of the form '$$()...'", false)
   TBLGEN_ERROR(err_multiple_expanded_macro_variables, "'$0' and '$1' appear in the same expansion context but have different amounts of repetition ($2 vs $3)", false)
   TBLGEN_ERROR(err_expansion_without_variable, "expansion does not contain any expandable macro variable", false)
   TBLGEN_ERROR(err_macro_var_redeclaration, "redeclaration of macro variable '$0'", false)
   TBLGEN_ERROR(err_macro_must_form, "macro in ${ 0 | select(expression,statement,type,declaration) } position must form a valid ${ 0 | select(expression,statement,type,declaration) }", false)
   TBLGEN_ERROR(err_invalid_seperator_token, "a valid seperator token (e.g. ';' or ',') must follow a${ 0 | select(_, n 'expr', 'stmt', 'decl', 'type',) } variable in a macro pattern", false)
   TBLGEN_ERROR(err_leftover_tokens_after_parsing, "unexpected leftover tokens after parsing ${ 0 | select(expression,statement,type,declaration) }", false)
   TBLGEN_ERROR(err_could_not_match_pattern, "could not match given arguments against any pattern of macro '$0'", false)
   TBLGEN_ERROR(err_bad_macro_variable_kind, "unexpected ${ 0 | select(expression,statement,type,declaration) } after expanding macro variable, expecting ${ 1 | select(expression,statement,type,declaration) }", false)
   TBLGEN_ERROR(err_attribute_no_args, "attribute @$0 does not take any arguments", false)
   TBLGEN_ERROR(err_attribute_arg_count, "attribute @$0 expects ${ 1 | select(at least, at most) } $2 ${ 2 | plural_s(argument) }, $3 given", false)
   TBLGEN_ERROR(err_attribute_bad_arg, "attribute @$0 expects ${ 1 | select(integer literal, floating point literal, string literal, expression, type, one of '$3') } as ${ 2 | ordinal } argument", false)
   TBLGEN_ERROR(err_attribute_applicability, "attribute @$0 is not applicable to ${ 1 | select(declarations, statements, expressions, types) }", false)
   TBLGEN_ERROR(err_attribute_not_valid_here, "attribute @$0 is not allowed here", false)
   TBLGEN_ERROR(err_attr_can_only_be_used, "attribute @$0 can only be used on ${ 1 | select(declarations, function declarations, record declarations, function types) }", false)
   TBLGEN_ERROR(err_implicit_attr_not_valid, "@implicit can only be used on operator function or initializer declarations", false)
   TBLGEN_ERROR(err_attr_align_bad_arg, "1st argument to @align must be ${ 0 | select(integral, a power of two, greater than or equal to zero) }", false)
   TBLGEN_ERROR(err_attr_align_lower_than_natural, "alignment value cannot be lower than the natural alignment of a type ($0 < $1)", false)
   TBLGEN_ERROR(err_attr_align_too_high, "alignment must be 268435456 bytes or smaller", false)
   TBLGEN_ERROR(err_max_macro_recursion_depth, "maximum macro recursion depth reached ($0) in expansion of macro $1", false)
   TBLGEN_ERROR(err_type_mismatch, "incompatible types $0 and $1", false)
   TBLGEN_ERROR(err_no_implicit_conv, "no implicit conversion from '$0' to '$1'", false)
   TBLGEN_ERROR(err_unexpected_value, "expected $0", false)
   TBLGEN_ERROR(err_expression_in_type_position, "expression cannot be used as a type", false)
   TBLGEN_ERROR(err_no_explicit_cast, "no known explicit conversion from $0 to $1", false)
   TBLGEN_ERROR(err_not_existential, "cannot apply type-union operator to non-existential type '$0'", false)
   TBLGEN_ERROR(err_return_type_mismatch, "returned value of type $0 is not compatible with declared return type $1", false)
   TBLGEN_ERROR(err_cond_not_boolean, "${ 0 | select(if,while,for,ternay operator '?:') } condition must be boolean", false)
   TBLGEN_ERROR(err_if_let_must_have_value, "'if let' declaration must define a value", false)
   TBLGEN_ERROR(err_if_let_val_must_be_boolean, "'if let' declaration type must be boolean-convertible", false)
   TBLGEN_ERROR(err_range_not_iterable, "range expression of for-in statement must conform to 'Iterable'", false)
   TBLGEN_ERROR(err_dict_key_not_hashable, "dictionary keys must conform to 'Hashable'", false)
   TBLGEN_ERROR(err_requires_contextual_type, "${ 0 | select('none', '__nullptr', member lookup with leading period)} requires a contextual type", false)
   TBLGEN_ERROR(err_not_string_representable, "value must conform to 'StringRepresentable'", false)
   TBLGEN_ERROR(err_illegal_subscript, "subscript operator cannot be applied to value of type $0", false)
   TBLGEN_ERROR(err_subscript_index_not_integral, "subscript indices have to be integral", false)
   TBLGEN_ERROR(err_cannot_assign_void, "cannot assign value of type void", false)
   TBLGEN_ERROR(err_reserved_identifier, "$0 is a reserved identifier", false)
   TBLGEN_ERROR(err_value_not_a_pointer, "value is not a pointer", false)
   TBLGEN_ERROR(err_type_not_callable, "given type $0 is not callable", false)
   TBLGEN_ERROR(err_assign_non_mutating_self, "cannot reassign 'self' in a non-mutating method", false)
   TBLGEN_ERROR(err_assign_to_rvalue, "cannot assign to rvalue of type $0", false)
   TBLGEN_ERROR(err_move_from_immutable_to_mutable, "cannot move immutable ${ 0 | select(value, variable '$1') } into a mutable binding", false)
   TBLGEN_ERROR(err_cannot_move_immutable, "cannot move immutable value '$0'", false)
   TBLGEN_ERROR(err_left_uninitialized, "'$0' may not go out of scope while being partially uninitialized", false)
   TBLGEN_ERROR(err_type_not_found, "type '$0' not found", false)
   TBLGEN_ERROR(err_not_copyable, "type '$0' is not implicitly copyable${ 1 | if(, did you forget a '.copy()'?)}", false)
   TBLGEN_ERROR(err_module_not_found, "module '$0' not found", false)
   TBLGEN_ERROR(err_submodule_not_found, "module '$0' does not have a submodule named '$1'", false)
   TBLGEN_ERROR(err_uninitialized_local, "'$0' may be uninitialized when used here", false)
   TBLGEN_ERROR(err_initialized_more_than_once, "'$0' may be initialized more than once", false)
   TBLGEN_ERROR(err_reassign_constant, "cannot reassign 'let' constant", false)
   TBLGEN_ERROR(err_already_moved, "'$0' cannot be moved since it may already have been ${ 1 | if(partially ) }moved before", false)
   TBLGEN_ERROR(err_move_after_borrow, "cannot move '$0' while it is ${ 1 | if(partially ) }borrowed", false)
   TBLGEN_ERROR(err_borrow_after_move, "cannot ${ 0 | if(mutably ) }borrow '$1' after it was ${ 2 | if(partially ) }moved", false)
   TBLGEN_ERROR(err_use_after_move, "'$0' may be used after it was ${ 1 | if(partially ) }moved, did you mean to make a copy?", false)
   TBLGEN_ERROR(err_assign_type_mismatch, "cannot assign value of type '$0' to type '$1'", false)
   TBLGEN_ERROR(err_cast_requires_op, "cast between '$0' and '$1' requires '${ 2 | select(as, as?, as!) }' operator", false)
   TBLGEN_ERROR(err_access_member_on_type, "cannot access member on value of type $0", false)
   TBLGEN_ERROR(err_access_member_on_pointer, "cannot access member on pointer, did you mean to use '->'?", false)
   TBLGEN_ERROR(err_member_access_non_pointer, "cannot apply member access operator '->' to non-pointer type $0", false)
   TBLGEN_ERROR(err_not_tuple, "cannot access indexed member on type $0", false)
   TBLGEN_ERROR(err_tuple_arity, "cannot access index $0 on tuple with arity $1", false)
   TBLGEN_ERROR(err_must_be_integral_constant, "${ 0 | ordinal } argument to ${ 1 | select(function,primitive initializer) } must be an integral constant", false)
   TBLGEN_ERROR(err_must_be_floating_constant, "${ 0 | ordinal } argument to ${ 1 | select(function,primitive initializer) } must be a floating point constant", false)
   TBLGEN_ERROR(err_circular_global_value, "type inferred global values $0 and $1 are circularly dependent on each others value", false)
   TBLGEN_ERROR(err_value_is_not_enum, "type $0 is not an enumeration", false)
   TBLGEN_ERROR(err_record_is_not_enum, "${ 0 | select(class,struct,enum,union,protocol) } $1 is not an enumeration", false)
   TBLGEN_ERROR(err_subscript_too_many_indices, "too many indices for subscript operator", false)
   TBLGEN_ERROR(err_vararg_cannot_pass_void, "cannot pass 'void' to a vararg function", false)
   TBLGEN_ERROR(err_iterator_must_return_option, "'next' function used in for-in must return an 'Option' type", false)
   TBLGEN_ERROR(err_could_not_infer_arr_element_type, "could not infer array literal element type", false)
   TBLGEN_ERROR(err_no_builtin_decl, "${ 0 | select(none, optional type, array literal, dictionary literal, string literal, 'Array' type, 'Dictionary' type, 'Option' type, failible cast, 'typeof', fallible init, 'try?', 'async / await', 'closure') } cannot be used because the declaration for '${ 0 | select(Option, Option, Array, Dictionary, String, Array, Dictionary, Option, Option, TypeInfo, Option, Option, Future, Box) }' was not found", false)
   TBLGEN_ERROR(err_builtin_decl_not_found, "builtin declaration '$0' is missing", false)
   TBLGEN_ERROR(err_cannot_reference_type, "type '$0' cannot be referenced", false)
   TBLGEN_ERROR(err_pointer_to_void, "pointers to 'Void' are not allowed, use 'u8*' instead", false)
   TBLGEN_ERROR(err_array_size_too_large, "fixed array size is too large (max. allowed size is $0, $1 given)", false)
   TBLGEN_ERROR(err_array_size_must_be_integral, "fixed array size must be an integral constant", false)
   TBLGEN_ERROR(err_zero_size_array, "fixed size arrays cannot have size zero", false)
   TBLGEN_ERROR(err_builtin_type_expects, "'${ 0 | select(MetaType, UnsafePtr, UnsafeMutablePtr) }' type expects one type template argument", false)
   TBLGEN_ERROR(err_cannot_infer_array_size, "cannot infer size of array type from given expression", false)
   TBLGEN_ERROR(err_referenced_while_evaluating, "${ 0 | select(alias, function) } '$1' is referenced while being evaluated", false)
   TBLGEN_ERROR(err_multiple_modules, "all source files in a compilation must be in the same module ('$0' and '$1' referenced in sources)", false)
   TBLGEN_ERROR(err_redeclared_symbol, "redeclaration of '$0'${ 1 | if( as a different kind of symbol) }", false)
   TBLGEN_ERROR(err_redeclared_extern_c, "redeclaration of extern C function '$0'", false)
   TBLGEN_ERROR(err_cannot_be_extern_C, "function cannot be extern C", false)
   TBLGEN_ERROR(err_decl_requires_init, "declaration of ${ 0 | select(local, global) } variable with inferred type requires an initializer", false)
   TBLGEN_ERROR(err_bad_destructure_type, "type $0 cannot be destructured into type $1", false)
   TBLGEN_ERROR(err_bad_destructure_count, "type $0 cannot be destructured into $1 values", false)
   TBLGEN_ERROR(err_ambiguous_destructure, "reference to destructuring operator is ambiguous", false)
   TBLGEN_ERROR(err_func_not_found, "${ 0 | select(function, method) } '$1' not found", false)
   TBLGEN_ERROR(err_method_not_found, "method '$0' does not exist on ${ 1 | if(instances of ) }type '$2'", false)
   TBLGEN_ERROR(err_no_matching_call, "no matching call ${ 0 | if(for ${ 1 | select(function,method,alias) } '$2') } found", false)
   TBLGEN_ERROR(err_no_matching_initializer, "no ${ 0 | select(matching , accessible ) }initializer for ${ 1 | select(class,struct,enum,union,protocol) } '$2' found", false)
   TBLGEN_ERROR(err_cannot_call, "cannot call ${ 0 | select(typedef,namespace) }", false)
   TBLGEN_ERROR(err_cannot_call_method_on, "cannot call method on value of type $0", false)
   TBLGEN_ERROR(err_cannot_call_type, "cannot call type $0${ 1 | if(  statically) }", false)
   TBLGEN_ERROR(err_dot_init_must_be_on_self, "'.init' must be called on 'self' or on a type name", false)
   TBLGEN_ERROR(err_dot_init_bad_type, "cannot call '.init' on type '$0'", false)
   TBLGEN_ERROR(err_dot_init_outside_initializer, "'self.init' cannot be called outside of an initializer", false)
   TBLGEN_ERROR(err_ambiguous_call, "call to ${ 0 | select(function, method, alias) } '$1' is ambiguous", false)
   TBLGEN_ERROR(err_ambiguous_reference, "reference to '$0' is ambiguous", false)
   TBLGEN_ERROR(err_prop_does_not_have, "property '$0' does not have a ${ 1 | select(getter, setter) }", false)
   TBLGEN_ERROR(err_subscript_does_not_have, "susbcript does not have a ${ 0 | select(getter, setter) }", false)
   TBLGEN_ERROR(err_incompatible_template_args, "incompatible template arguments for ${ 0 | select(class,struct,enum,union,protocol,alias) } $1", false)
   TBLGEN_ERROR(err_mutating_accessor_on_const, "cannot access mutating ${ 0 | select(getter, setter) } on a 'let' constant", false)
   TBLGEN_ERROR(err_too_few_args_for_call, "too few arguments for function call, expected $0 but found $1", false)
   TBLGEN_ERROR(err_too_many_args_for_call, "too many arguments for function call, expected $0 but found $1", false)
   TBLGEN_ERROR(err_variadic_sizeof_expects, "expected variadic template parameter as argument to 'sizeof...'", false)
   TBLGEN_ERROR(err_does_not_name_template_parm, "$0 does not name a ${ 1 | if(variadic ) }template parameter", false)
   TBLGEN_ERROR(err_non_type_param_used_as_type, "non-type template parameter $0 cannot be used as a type", false)
   TBLGEN_ERROR(err_protocol_template_params, "protocols may not be templated, use associated types instead", false)
   TBLGEN_ERROR(err_invalid_pack_expansion, "cannot apply pack expansion operator '...' to expression that does not contain a variadic template parameter or argument", false)
   TBLGEN_ERROR(err_pack_expansion_cannot_appear, "pack expansion operator is not allowed here", false)
   TBLGEN_ERROR(err_unexpanded_pack, "expression contains unexpanded parameter pack", false)
   TBLGEN_ERROR(err_variadic_field_type, "type of variadic field must be a parameter pack expansion", false)
   TBLGEN_ERROR(err_template_param_shadow, "template parameter '$0' shadows a template paramater in an enclosing scope", false)
   TBLGEN_ERROR(err_variadic_field_must_be_indexed, "variadic field access must be indexed", false)
   TBLGEN_ERROR(err_variadic_field_single_index, "variadic field expects a single index", false)
   TBLGEN_ERROR(err_variadic_field_index_integral, "variadic field index must be a static integer", false)
   TBLGEN_ERROR(err_initializer_templ_args_must_be_inferrable, "${ 0 | select(initializer) } template parameter '$1' must be used in the function signature", false)
   TBLGEN_ERROR(err_not_a_template, "${ 0 | select(class,struct,enum,union,protocol,function,method,alias,namespace) } '$1' is not a template", false)
   TBLGEN_ERROR(err_ctfe_circular_dependence, "functions '$0' and '$1' are circularly dependent on each others definition and cannot be statically evaluated", false)
   TBLGEN_ERROR(err_maximum_recursion_depth, "maximum recursion depth of $0 exceeded while evaluating function '$1'", false)
   TBLGEN_ERROR(err_maximum_branch_depth, "maximum branching depth of $0 exceeded while evaluating function '$1'", false)
   TBLGEN_ERROR(err_no_definition, "declared function '$0' cannot be evaluated at compile time", false)
   TBLGEN_ERROR(err_not_compiletime_evaluable, "function '$0' cannot be evaluated at compile time, use @compiletime to make it evaluable", false)
   TBLGEN_ERROR(err_fn_called_during_ctfe, "'$0' ${ 1 | select(was called, cannot be called) } during compile time function evaluation", false)
   TBLGEN_ERROR(err_unreachable_during_ctfe, "'unreachable' instruction encountered during compile time function evaluation", false)
   TBLGEN_ERROR(err_size_not_known, "size of ${ 0 | select(class,struct,enum,union,protocol) } '$1' is not known when requested here", false)
   TBLGEN_ERROR(err_cannot_persist_type, "static expression cannot return value of type '$0' because it is not persistable", false)
   TBLGEN_ERROR(note_non_persistable_member_here, "member of non-persistable type '$0' here", false)
   TBLGEN_ERROR(err_compiler_ns_unknown_entity, "unknown entity '$0' in reserved 'Compiler' namespace", false)
   TBLGEN_ERROR(err_compiler_ns_bad_def, "unexpected structure of '$0' entity in reserved 'Compiler' namespace", false)
   TBLGEN_ERROR(err_reflection_decl_not_found, "declaration for '$0' was not found in 'Compiler' namespace", false)
   TBLGEN_ERROR(err_reflect_outside_func, "'Compiler.${ 0 | select(function, mangledFunction) }' cannot be used outside of a function body", false)
   TBLGEN_ERROR(err_cannot_reflect_type, "cannot reflect over type '$0'", false)
   TBLGEN_ERROR(err_namespace_not_found, "namespace $0 does not exist", false)
   TBLGEN_ERROR(err_namespace_does_not_have_member, "namespace $0 does not define member $1", false)
   TBLGEN_ERROR(err_import_multiple_with_wildcard, "cannot import multiple items when a wildcard ('*') import is present", false)
   TBLGEN_ERROR(err_invalid_using_alias, "cannot use named 'using' declaration when a wildcard import or multiple imported items are present", false)
   TBLGEN_ERROR(err_cannot_lookup_member_in, "cannot lookup member in ${ 0 | select(class,struct,enum,union,protocol,function,method,alias,namespace,field,property,typedef,module) } '$1'", false)
   TBLGEN_ERROR(err_using_target_ambiguous, "target of 'using' declaration is ambiguous", false)
   TBLGEN_ERROR(err_class_not_accessible, "${ 0 | select(class,struct,enum,union,protocol) } $1 is not accessible", false)
   TBLGEN_ERROR(err_class_not_found, "class $0 not found", false)
   TBLGEN_ERROR(err_instantiate_abstract_class, "cannot instantiate abstract class $0", false)
   TBLGEN_ERROR(err_member_not_found, "${ 0 | select(class,struct,enum,union,protocol,function,method,alias,namespace, module) } '$1' does not have a member named '$2'", false)
   TBLGEN_ERROR(err_not_found, "$0 not found", false)
   TBLGEN_ERROR(err_member_needs_initializing, "member $0 must be initialized in every constructor", false)
   TBLGEN_ERROR(err_generic_type_not_found, "${ 0 | select(class,struct,enum,union,protocol) } does not have a generic type $1", false)
   TBLGEN_ERROR(err_generic_type_count, "expected $0 generic type ${ 0 | plural_s(argument) }, $1 given", false)
   TBLGEN_ERROR(err_generic_type_incompatible, "generic type parameter $0 is not compatible with given type $1", false)
   TBLGEN_ERROR(err_struct_member_of_self, "structs cannot have members of their own type (use a pointer instead)", false)
   TBLGEN_ERROR(err_constant_field_setter, "constant fields cannot have a setter", false)
   TBLGEN_ERROR(err_self_outside_method, "${ 0 | select(self, super, Self) } can only be used in instance methods", false)
   TBLGEN_ERROR(err_super_without_base, "cannot reference 'super' because class $0 does not have a base class", false)
   TBLGEN_ERROR(err_no_template_method, "${ 0 | select(class,struct,enum,union,protocol) } $1 does not have a templated method '$2'", false)
   TBLGEN_ERROR(err_overload_generic_params, "${ 0 | select(function, method) } overloads must have the same template arguments", false)
   TBLGEN_ERROR(err_duplicate_method, "duplicate declaration of ${ 0 | select(function, method) } $1", false)
   TBLGEN_ERROR(err_union_initializer_type, "union initializer argument must be convertible to one of the unions types", false)
   TBLGEN_ERROR(err_enum_initializer, "enums can only be constructed through one of their cases", false)
   TBLGEN_ERROR(err_protocol_initializer, "protocols cannot be initialized", false)
   TBLGEN_ERROR(err_circular_data_members, "circular dependency beetween fields of structs $0 and $1", false)
   TBLGEN_ERROR(note_other_field_here, "dependent field here", false)
   TBLGEN_ERROR(err_non_static_member_accessed_statically, "static ${ 0 | select(data member, property) } $1 of ${ 2 | select(class,struct,enum,union,protocol) } $3 cannot be accessed statically", false)
   TBLGEN_ERROR(err_implicit_conformance_cannot_be_declared, "'${ 0 | select(Equatable,Hashable,StringRepresentable, Copyable) }' conformance cannot be implicitly declared: data member '$1' is not ${ 0 | select(equatable,hashable,string representable, copyable) }", false)
   TBLGEN_ERROR(err_protocol_not_found, "protocol $0 does not exist", false)
   TBLGEN_ERROR(err_conforming_to_non_protocol, "$0 is not a protocol", false)
   TBLGEN_ERROR(err_protocol_property_get_set, "property in protocol must require a getter or setter", false)
   TBLGEN_ERROR(err_does_not_conform, "${ 0 | select(class, struct, enum, union, protocol) } $1 does not conform to protocol $2", false)
   TBLGEN_ERROR(err_constraint_always_false, "constraint is always false", false)
   TBLGEN_ERROR(err_cannot_be_used_as_concept, "$0 '$1' cannot be used as a constraint", false)
   TBLGEN_ERROR(err_concept_must_be_bool, "alias '$0' used as a constraint must return a boolean value", false)
   TBLGEN_ERROR(err_not_a_valid_concept, "alias '$0' cannot be used as a constraint because ${ 1 | select(its value is not boolean, it does not have exactly one type template parameter) }", false)
   TBLGEN_ERROR(err_unconstrained_lookup, "cannot lookup member in unconstrained associated type '$0'", false)
   TBLGEN_ERROR(err_cannot_be_referenced_in_constraint, "$0 '$1' cannot be referenced in a constraint", false)
   TBLGEN_ERROR(err_protocol_cannot_be_used_as_type, "protocol '$0' with associated type constraints can only be used as a generic constraint", false)
   TBLGEN_ERROR(err_incorrect_protocol_impl, "${ 0 | select(class, struct, enum, union, protocol) } $1 does not correctly implement protocol $2", false)
   TBLGEN_ERROR(err_circular_conformance, "circular protocol conformance between '$0' and '$1'", false)
   TBLGEN_ERROR(err_definition_in_protocol, "${ 0 | select(method, property, subscript, initializer) } in a protocol may not have a body, use an extension instead", false)
   TBLGEN_ERROR(err_may_not_appear_in_protocol, "${ 0 | select(class,struct,enum,union,protocol,function,method,alias,namespace,field,property,typedef,module) } declaration cannot appear in a protocol", false)
   TBLGEN_ERROR(err_protocol_extension_must_override, "declaration in protocol extension must override a protocol requirement", false)
   TBLGEN_ERROR(err_no_such_associated_type, "${ 0 | select(class, struct, enum, union, protocol) } '$1' does not conform to a protocol with an associated type named '$2'", false)
   TBLGEN_ERROR(err_associated_type_ambiguous, "reference to associated type '$0' is ambiguous", false)
   TBLGEN_ERROR(err_associated_type_no_default, "must specify a type for associated type '$0' because it does not have a default type", false)
   TBLGEN_ERROR(err_associated_type_constraint, "associated type '$0' (aka $1) does not satisfy constraint: $2", false)
   TBLGEN_ERROR(err_constraint_not_satisfied, "unsatisified constraint${ 0 | if(: ) }$1", false)
   TBLGEN_ERROR(err_mutating_on_class, "'mutating' cannot be used on class methods", false)
   TBLGEN_ERROR(err_cannot_assign_to_self, "cannot assign to 'self' in non mutating method", false)
   TBLGEN_ERROR(err_cannot_assign_to_property, "cannot assign to property in non mutating method", false)
   TBLGEN_ERROR(err_self_used_before_initialized, "'self' cannot be accessed before all properties are initialized", false)
   TBLGEN_ERROR(err_field_must_be_initialized, "property '$0' must be initialized before the end of the constructor", false)
   TBLGEN_ERROR(err_enum_case_not_found, "enum $0 does not define case $1 ${ 2 | if(with the given arguments) }", false)
   TBLGEN_ERROR(err_enum_case_wrong_no_args, "case $0 requires $1 arguments, $2 given", false)
   TBLGEN_ERROR(err_indexed_prop_on_nun_tuple, "cannot access indexed property on non-tuple type $0", false)
   TBLGEN_ERROR(err_index_higher_than_arity, "cannot access index $0 on tuple with arity $1", false)
   TBLGEN_ERROR(err_attr_not_applicable, "attribute '$0' is not valid here", false)
   TBLGEN_ERROR(err_attr_does_not_exist, "unknown attribute '$0'", false)
   TBLGEN_ERROR(err_alias_without_value, "alias declaration must have a value", false)
   TBLGEN_ERROR(err_not_initialized, "value with no default constructor must be explicitly initialized", false)
   TBLGEN_ERROR(err_var_redeclaration, "redeclaration of variable $0", false)
   TBLGEN_ERROR(err_undeclared_identifer, "reference to undeclared identifier $0", false)
   TBLGEN_ERROR(err_private_access, "private ${ 0 | select(class,struct,enum,union,protocol,function,method,alias,namespace,field,property,typedef,module) } '$1' is not accessible here", false)
   TBLGEN_ERROR(err_fileprivate_access, "fileprivate ${ 0 | select(class,struct,enum,union,protocol,function,method,alias,namespace,field,property,typedef,module) } '$1' can only be accessed within file '$2'", false)
   TBLGEN_ERROR(err_protected_access, "protected ${ 0 | select(class,struct,enum,union,protocol,function,method,alias,namespace,field,property,typedef,module) } '$1' can only be accessed within class '$2' or subclasses of it", false)
   TBLGEN_ERROR(err_internal_access, "internal ${ 0 | select(class,struct,enum,union,protocol,function,method,alias,namespace,field,property,typedef,module) } '$1' can only be accessed within module '$2'", false)
   TBLGEN_ERROR(err_protected_outside_class, "'protected' access specifier can only be used in a class declaration", false)
   TBLGEN_ERROR(err_bad_main_def, "'main' may not ${ 0 | select(throw, be unsafe, be async, return a type other than 'Int' or 'Void') }", false)
   TBLGEN_ERROR(err_bad_main_sig, "invalid main signature (valid ones are () and (Int, UnsafePtr[UnsafePtr[u8]]))", false)
   TBLGEN_ERROR(err_circular_module_dependency, "circular dependency between modules '$0' and '$1'", false)
   TBLGEN_ERROR(err_llvm_function_name_reserved, "function names starting with 'llvm.' are reserved", false)
   TBLGEN_ERROR(err_return_outside_func, "keyword 'return' is only allowed in function bodies", false)
   TBLGEN_ERROR(err_return_ref, "cannot return value of reference type '$0'${ 1 | if(, did you mean to make a copy?) }", false)
   TBLGEN_ERROR(err_loop_keyword_outside_loop, "keyword '${ 0 | select(continue, break) }' is only valid in loop bodies", false)
   TBLGEN_ERROR(err_loop_label, "no loop with label '$0' is in scope", false)
   TBLGEN_ERROR(err_no_type_after_as, "expected type after 'as'", false)
   TBLGEN_ERROR(err_duplicate_label, "duplicate label '$0'", false)
   TBLGEN_ERROR(err_label_not_found, "no label $0 to go to", false)
   TBLGEN_ERROR(err_goto_skips_decl, "goto statement cannot jump over variable declaration", false)
   TBLGEN_ERROR(err_static_assert_failed, "static assertion failed${ 0 | if(: ) }$1", false)
   TBLGEN_ERROR(err_cant_print_expr, "cannot static_print expression of type $0", false)
   TBLGEN_ERROR(err_traits_expects_tuple, "__traits(${ 0 | select(arity) }) expects a tuple as its only argument", false)
   TBLGEN_ERROR(err_traits_expects_int, "__traits(${ 0 | select(bitwidth_of) }) expects an integral type or value", false)
   TBLGEN_ERROR(err_traits_expects_fp, "__traits(${ 0 | select(fp_precision) }) expects a floating point type or value", false)
   TBLGEN_ERROR(err_incompatible_binop_types, "${ 0 | select(left, right) } hand side of binary operator '$1' must be ${ 2 | select(integral, floating point, boolean) }", false)
   TBLGEN_ERROR(err_binop_not_applicable, "cannot apply binary operator '$0' to values of type $1 and $2", false)
   TBLGEN_ERROR(err_different_operand_types, "both operands to binary operator '$0' must be of the same type, $1 and $2 given", false)
   TBLGEN_ERROR(err_unary_op_not_applicable, "cannot apply ${ 0 | select(prefix, postfix) } unary operator '$1' to ${ 2 | select(value, rvalue) } of type $3", false)
   TBLGEN_ERROR(err_const_unary_op, "mutating unary operator '$0' cannot be applied to a constant value", false)
   TBLGEN_ERROR(err_dereference_non_pointer, "cannot dereference non-pointer type $0", false)
   TBLGEN_ERROR(err_reference_non_lvalue, "cannot take address of rvalue of type $0", false)
   TBLGEN_ERROR(err_unexpected_expression, "unexpected expression; expecting binary operator", false)
   TBLGEN_ERROR(err_match_value_not_equatable, "matched value must be enum or conform to equatable", false)
   TBLGEN_ERROR(err_invalid_match, "cannot match values of types $0 and $1", false)
   TBLGEN_ERROR(err_duplicate_case, "duplicate case '$0' in match statement", false)
   TBLGEN_ERROR(err_continue_from_last_case, "cannot continue from last case in a match statement", false)
   TBLGEN_ERROR(err_continue_case_with_bound_vals, "cannot continue to case with bound values", false)
   TBLGEN_ERROR(err_match_not_exhaustive, "match statements must be exhaustive", false)
   TBLGEN_ERROR(err_main_invalid_signature, "invalid signature for 'main'", false)
   TBLGEN_ERROR(err_returning_incomp_type, "returning value of type $0 from function with declared return type $1", false)
   TBLGEN_ERROR(err_not_all_code_paths_return, "not all code paths return a value", false)
   TBLGEN_ERROR(err_unreachable_code, "unreachable code", false)
   TBLGEN_ERROR(err_fallible_init_return, "fallible initializers may only return a 'none' literal", false)
   TBLGEN_ERROR(err_fallible_init_in_non_fallible_init, "fallible initializers can only be called from within another fallible initializer", false)
   TBLGEN_ERROR(err_return_in_noreturn_func, "function that returns an unpopulated type may not return normally", false)
   TBLGEN_ERROR(err_control_reaches_end_noreturn, "control reaches the end of a noreturn function", false)
   TBLGEN_ERROR(err_func_redeclaration, "redeclaration of ${ 0 | select(function,method) } $1 with the same signature as a previous declaration", false)
   TBLGEN_ERROR(err_incomp_arg_counts, "incompatible argument count: expected $0 but got $1", false)
   TBLGEN_ERROR(err_lambda_arg_default_val, "lambda expression arguments cannot have default values", false)
   TBLGEN_ERROR(err_lambda_could_not_infer_type_name, "could not infer type of argument '$0'", false)
   TBLGEN_ERROR(err_lambda_could_not_infer_type, "could not infer type of ${ 0 | ordinal } argument of lambda expression", false)
   TBLGEN_ERROR(err_typedef_generic_not_provided, "generic type $0 not provided for typedef", false)
   TBLGEN_ERROR(err_throw_in_non_throwing_fn, "'throw' cannot appear in a non-throwing function '$0'", false)
   TBLGEN_ERROR(err_throwing_fn_called_in_non_throwing, "cannot call throwing function '$0' in non-throwing function '$1'", false)
   TBLGEN_ERROR(err_try_without_call_to_throwing_fn, "expression after 'try' must contain a call to a throwing function", false)
   TBLGEN_ERROR(err_throwing_call_not_in_try, "call to throwing function '$0' must appear in a 'try' expression", false)
   TBLGEN_ERROR(err_try_in_non_throwing_fn, "'try' may only appear in a throwing function or an exhaustive 'do' statement", false)
   TBLGEN_ERROR(err_not_throwable, "${ 0 | select(thrown,caught) } value must conform to 'Throwable'", false)
   TBLGEN_ERROR(err_duplicate_catch, "equivalent catch statements", false)
   TBLGEN_ERROR(err_catch_all_must_be_alone, "catch-all statement must appear alone", false)
   TBLGEN_ERROR(err_await_in_non_async_fn, "'await' can only appear in the body of an 'async' function", false)
   TBLGEN_ERROR(err_cannot_borrow, "cannot ${ 0 | if(mutably ) }borrow '$1' since there is already a ${ 2 | if(mutable ) }borrow active", false)
   TBLGEN_ERROR(err_cannot_move, "${ 0 | select(global variable)} cannot be moved", false)
   TBLGEN_ERROR(err_cannot_move_field, "cannot move field of ${ 0 | select(global variable, class) }", false)
   TBLGEN_ERROR(err_invalid_mixin_kind, "mixin in ${ 0 | select(expression,declaration,statement) } position must form a valid ${ 0 | select(expression,declaration,statement) }", false)
   TBLGEN_ERROR(err_mixin_expr_must_be_string, "mixin expression must be of type 'String' ('$0' given)", false)
   TBLGEN_ERROR(err_llvm_backend, "an error occured in the LLVM backend: '$0'", false)
   TBLGEN_ERROR(_last_err, "", false)
#endif
#undef TBLGEN_ERROR

#ifdef TBLGEN_WARN
   TBLGEN_WARN(_first_warn, "")
   TBLGEN_WARN(warn_generic_warn, "$0")
   TBLGEN_WARN(warn_inexact_fp, "floating point value cannot be represented exactly")
   TBLGEN_WARN(warn_implicit_cast, "implicit cast from $0 to $1")
   TBLGEN_WARN(warn_expr_result_unused, "expression result unused")
   TBLGEN_WARN(warn_main_return_type, "return type of 'main' will always be set to i64")
   TBLGEN_WARN(_last_warn, "")
#endif
#undef TBLGEN_WARN

#ifdef TBLGEN_NOTE
   TBLGEN_NOTE(_first_note, "")
   TBLGEN_NOTE(note_generic_note, "$0")
   TBLGEN_NOTE(note_to_match_this, "to match this")
   TBLGEN_NOTE(note_previous_vararg_here, "previous varargs here")
   TBLGEN_NOTE(note_override_cand_not_viable, "base method not viable because of ${ 0 | select(incompatible signature, incompatible return type, incompatible 'throws' specification, incompatible 'unsafe' specification, incompatible 'async' specification, incompatible label) }")
   TBLGEN_NOTE(note_declared_here, "declared here")
   TBLGEN_NOTE(note_pattern_not_viable_expected_tok, "pattern not viable: expected $0 ${ 1 | if(or $1) }, found $2")
   TBLGEN_NOTE(note_pattern_here, "pattern declared here")
   TBLGEN_NOTE(note_in_expansion, "in expansion of macro '$0' here")
   TBLGEN_NOTE(note_previous_init_here, "previous initialization was here")
   TBLGEN_NOTE(note_uninitialized_declared_here, "was declared here")
   TBLGEN_NOTE(note_declared_const_here, "'$0' declared as constant here")
   TBLGEN_NOTE(note_moved_here, "move happened here")
   TBLGEN_NOTE(note_dependent_global_here, "dependent global here")
   TBLGEN_NOTE(note_previous_decl, "previous declaration here")
   TBLGEN_NOTE(note_cand_no_implicit_conv, "candidate not viable: no implicit conversion from '$0' to '$1' for ${ 2 | ordinal } argument${ 3 | if( (builtin operator candidate)) }")
   TBLGEN_NOTE(note_cand_no_implicit_conv_inferred, "candidate not viable: no implicit conversion from '$0' to '$1' for ${ 2 | ordinal } argument (with template arguments inferred as [$3])")
   TBLGEN_NOTE(note_cand_failed_constraint, "candidate not viable because of failed constraint: $0")
   TBLGEN_NOTE(note_cand_failed_constraint_inferred, "candidate not viable because of failed constraint: $0 (with template arguments inferred as [$1])")
   TBLGEN_NOTE(note_cand_invalid_self, "candidate not viable: 'self' argument has type '$0', '$1' given")
   TBLGEN_NOTE(note_cand_invalid_return, "candidate not viable: return type is '$0', need '$1'")
   TBLGEN_NOTE(note_cand_label, "candidate not viable: expected ${ 0 | select(no label, label '$0')} for ${ 1 | ordinal } argument, ${ 2 | select(none, label '$2')} given")
   TBLGEN_NOTE(note_too_few_arguments, "candidate not viable: requires at least $0 ${ 0 | plural_s(argument) }, $1 given${ 2 | if( (builtin operator candidate)) }")
   TBLGEN_NOTE(note_too_many_arguments, "candidate not viable: requires at most $0 ${ 0 | plural_s(argument) }, $1 given${ 2 | if( (builtin operator candidate)) }")
   TBLGEN_NOTE(note_too_few_arguments_inferred, "candidate not viable: requires at least $0 ${ 0 | plural_s(argument) }, $1 given (with template arguments inferred as [$2])")
   TBLGEN_NOTE(note_too_many_arguments_inferred, "candidate not viable: requires at most $0 ${ 0 | plural_s(argument) }, $1 given (with template arguments inferred as [$2])")
   TBLGEN_NOTE(note_candidate_requires_context, "candidate not viable: could not infer type of ${ 0 | ordinal } argument")
   TBLGEN_NOTE(note_could_not_infer_template_arg, "candidate not viable: could not infer template argument $0")
   TBLGEN_NOTE(note_inferred_template_arg_conflict, "candidate not viable: conflicting ${ 0 | select(types,values) } $1 and $2 deduced for template argument $3")
   TBLGEN_NOTE(note_template_arg_kind_mismatch, "candidate not viable: expected ${ 0 | select(typename, value, variadic typename, variadic value) } but found ${ 1 | select(typename, value, variadic typename, variadic value) } for ${ 2 | ordinal } argument")
   TBLGEN_NOTE(note_template_arg_type_mismatch, "candidate not viable: expected $0 as ${ 1 | ordinal } argument but found $2")
   TBLGEN_NOTE(note_template_arg_covariance, "expected type ${ 0 | select(conforming to protocol, that is a subclass of) } '$1' for template parameter '$2', but got '$3'")
   TBLGEN_NOTE(note_template_parameter_here, "template parameter declared here")
   TBLGEN_NOTE(note_too_many_template_args, "candidate not viable: expected at most $0 ${ 0 | plural_s(template argument) }, $1 given")
   TBLGEN_NOTE(note_method_must_be_static, "candidate method not viable: not declared 'static'")
   TBLGEN_NOTE(note_candidate_is_mutating, "candidate method not viable: 'mutating' method cannot be called on a ${ 0 | select(`let` constant, temporary) }")
   TBLGEN_NOTE(note_candidate_requires_ref, "candidate function not viable: requires ${ 0 | if(mutable ) }${ 1 | select(reference, pointer) } for ${ 2 | ordinal } argument")
   TBLGEN_NOTE(note_candidate_here, "candidate declared here")
   TBLGEN_NOTE(note_builtin_candidate, "builtin ${ 0 | if(operator ) }candidate")
   TBLGEN_NOTE(note_instantiation_of, "in instantiation of ${ 0 | select(class,struct,enum,union,protocol,function,method,alias,namespace) } '$1'${ 2 | if( with template arguments [$3]) }")
   TBLGEN_NOTE(note_dependency_chain, "chain of dependency: $0")
   TBLGEN_NOTE(note_called_here, "called from here")
   TBLGEN_NOTE(note_call_chain, "call chain: $0")
   TBLGEN_NOTE(note_printf_ctfe, "'printf' encountered during ctfe: $0")
   TBLGEN_NOTE(note_overload_generic_params, "previous template argument list declared here")
   TBLGEN_NOTE(note_duplicate_method, "previous declaration here")
   TBLGEN_NOTE(note_incorrect_protocol_impl_prop, "required ${ 0 | select(subscript, property) } ${ 0 | if('$1' ) }${ 2 | select(is missing, requires a getter, requires a setter, requires a getter and a setter) }")
   TBLGEN_NOTE(note_incorrect_protocol_impl_method_missing, "required method '$0' is missing")
   TBLGEN_NOTE(note_incorrect_protocol_impl_method_num_args, "candidate has incorrect number of arguments, expected ${ 0 | select(at least, at most) } $1, $2 given")
   TBLGEN_NOTE(note_incorrect_protocol_impl_method_signature, "candidate has incomaptible signature ('$0' expected for ${ 1 | ordinal } argument, found '$2')")
   TBLGEN_NOTE(note_incorrect_protocol_impl_method_return_type, "candidate has incomaptible return type ('$0' expected, found '$1')")
   TBLGEN_NOTE(note_incorrect_protocol_impl_method_label, "expected label '$0' for ${ 1 | ordinal } argument, ${ 2 | select(none, '$3') } given")
   TBLGEN_NOTE(note_incorrect_protocol_impl_method_no_label, "expected no label for ${ 0 | ordinal } argument, '$1' given")
   TBLGEN_NOTE(note_incorrect_protocol_impl_attr, "${ 0 | select(throwing, unsafe, async, mutating, non-static, static) } function cannot satisfy ${ 0 | select(non-throwing, non-unsafe, non-async, non-mutating, static, non-static) } protocol requirement")
   TBLGEN_NOTE(note_incorrect_protocol_impl_fallible, "candidate is fallible, non-fallible init required")
   TBLGEN_NOTE(note_conformance_chain, "conformance chain: $0")
   TBLGEN_NOTE(note_incorrect_protocol_impl_prop_type, "${ 0 | select(subscript, property) } ${ 0 | if('$1' ) }has incompatible type, expected $2 but found $3")
   TBLGEN_NOTE(note_associated_type_missing, "associated type '$0' must be defined")
   TBLGEN_NOTE(note_constraint_here, "constraint declared here")
   TBLGEN_NOTE(note_mark_mutating, "mark method as 'mutating' to make 'self' mutable")
   TBLGEN_NOTE(note_uninitialized_property, "property '$0' is not yet initialized")
   TBLGEN_NOTE(note_var_redeclaration, "previous declaration is here")
   TBLGEN_NOTE(note_access_spec_here, "${ 0 | if(implicitly ) }declared ${ 1 | select(<<<should not happen>>>, public, private, protected, internal, fileprivate) } here")
   TBLGEN_NOTE(note_imported_from_module, "imported from module '$0' here")
   TBLGEN_NOTE(note_duplicate_label, "previous label here")
   TBLGEN_NOTE(note_goto_skipped_decl, "skipped declaration of variable $0 here")
   TBLGEN_NOTE(note_static_print, "$0")
   TBLGEN_NOTE(note_duplicate_case, "previous case ${ 0 | select(is here, binds all associated values) }")
   TBLGEN_NOTE(note_missing_case, "case '$0' is either missing or contains expression checks")
   TBLGEN_NOTE(note_func_redeclaration_memberwise_init, "previous declaration is the memberwise initializer")
   TBLGEN_NOTE(note_func_redeclaration, "previous declaration is here")
   TBLGEN_NOTE(note_previous_catch, "previous catch statement was here")
   TBLGEN_NOTE(note_borrow_begins_here, "previous borrow begins here")
   TBLGEN_NOTE(note_borrow_ends_here, "previous borrow ends here")
   TBLGEN_NOTE(_last_note, "")
#endif
#undef TBLGEN_NOTE

#undef TBLGEN_MSG